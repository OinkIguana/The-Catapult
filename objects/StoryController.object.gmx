<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
state[0] = -1;
progress[0] = 0;
cutscene = false;
inikey = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delay for the beginning of stuff
switch(state[0]) {
    case S_INTRO:
        switch(progress[0]) {
            case 1:
                dialog_from_array(0);
                break;
        }
    case S_WEIGHT:
        switch(progress[0]) {
            case 4:
                dialog_from_array(2);
                break;
        }
    case S_NOBLESLAND:
        dialog_import("fix");
        switch(progress[0]) {
            case 0:
                dialog_from_array(9, 10);
                break;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update characters' current dialog
switch(state[0]) {
    case S_INTRO:
        dialog_import("intro.phil", Phil);
        dialog_import("intro.alice", Alice);
        dialog_import("intro.jared", Jared);
        dialog_import("intro.mom", Mom);
        
        dialog_import("cookie.log.0", eLog);
        break;
    case S_COOKIE:
        dialog_import("intro.mom", Mom);
        dialog_import("cookie.catapult", eCatapult);
        if(progress[0] &lt; 2) {
            dialog_import("cookie.phil.0", Phil);
            dialog_import("cookie.alice.0", Alice);
            dialog_import("cookie.jared.0", Jared);
            dialog_import("cookie.log.0", eLog);
        } else {
            if(progress[0] == 7) {
                dialog_import("cookie.phil.7", Phil);
                dialog_import("cookie.alice.7", Alice);
            } else {
                dialog_import("cookie.phil.2", Phil);
                dialog_import("cookie.alice.2", Alice);
            }
            dialog_import("cookie.jared.2", Jared);
            dialog_import("cookie.log.2", eLog);
        }
        if(progress[0] == 3) {
            dialog_import("cookie.wren.3", Wren);
        } else if(progress[0] &gt; 3) {
            dialog_import("cookie.wren.4", Wren);
        } else {
            dialog_import("cookie.wren.0", Wren);
        }
        break;
    case S_STRING:
        dialog_import("string.mom", Mom);
        dialog_import("string.jared", Jared);
        dialog_import("string.wren", Wren);
        dialog_import("string.catapult", eCatapult);
        dialog_import("string.phil", Phil);
        if(progress[0] &lt;= 1) {
            dialog_import("string.alice.1", Alice);
        } else {
            dialog_import("string.alice.2", Alice);
        }
        break;
    case S_WEIGHT:
        dialog_import("string.jared", Jared);
        dialog_import("string.catapult", eCatapult);
        if(progress[0] &lt;= 1) {
            if(progress[0] == 0) {
                dialog_import("weight.mom.0", Mom);
                dialog_import("weight.wren.0", Wren);
            } else {
                dialog_import("weight.mom.1", Mom);
                dialog_import("weight.wren.1", Wren);
            }
            dialog_import("weight.phil.0", Phil);
        } else {
            if(progress[0] == 5) {
                dialog_import("weight.phil.5", Phil);
            } else {
                dialog_import("weight.phil.2", Phil);
            }
            dialog_import("weight.mom.0", Mom);
            dialog_import("weight.wren.0", Wren);
        }
        if(progress[0] &lt;= 2) {
            dialog_import("weight.alice.0", Alice);
        } else {
            dialog_import("weight.alice.3", Alice);
        }
        break;
    case S_GREASE:
        dialog_import("grease.wren.0", Wren);
        dialog_import("grease.alice.0", Alice);
        dialog_import("grease.phil.0", Phil);
        dialog_import("string.catapult", eCatapult);
        if(progress[0] &lt;= 1) {
            dialog_import("grease.jared.0", Jared);
        } else if(progress[0] == 2) {
            dialog_import("grease.jared.2", Jared);
        }
        if(progress[0] == 0) {
            dialog_import("grease.mom.0", Mom);
        } else if(progress[0] == 1) {
            dialog_import("grease.mom.1", Mom);
        } else {
            dialog_import("grease.mom.2", Mom);
        }
        break;
    case S_FIX:
        dialog_import("fix.wren", Wren);
        dialog_import("fix.alice", Alice);
        dialog_import("fix.phil", Phil);
        dialog_import("fix.jared", Jared);
        dialog_import("fix.mom", Mom);
        dialog_import("fix.catapult", eCatapult);
        break;
    case S_NOBLESLAND:
        dialog_import("guard", Guard);
        dialog_import("ulrico", Ulrico);
        dialog_import("protector", Protector);
        break;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do story events
switch(state[0]) {
    case S_INTRO:
        dialog_import("intro");
        switch(progress[0]) {
            case 0:
                alarm[0] = 1;
                progress[0]++;
                break;
            case 1: 
                if(room == rHome) {
                    cutscene = true;
                    if(Player.hdist == 0 &amp;&amp; Player.vdist == 0) {
                        dialog_from_array(1, 7);
                        inv_add("Cookie", 1);
                        progress[0]++;
                        cutscene = false;
                    }
                }
                break;
            case 2:
                if(room == rLeft_center) {
                    if(Player.hdist == 0 &amp;&amp; Player.vdist == 0) {
                        dialog_from_array(8);
                        progress[0] = 0;
                        state[0] = S_COOKIE;
                    }
                }
                break;
        }
        break;
    case S_COOKIE:
        dialog_import("cookie");
        switch(progress[0]) {
            case 1:
                if(room == rLeft_center) {
                    if(Player.hdist == 0 &amp;&amp; Player.vdist == 0) {
                        dialog_from_array(0);
                        progress[0]++;
                    }
                }
                break;
            case 4:
                if(instance_exists(Wren)) {
                    if(Wren.hdist == 0) {
                        Wren.vdist = 128;
                        progress[0]++;
                    }
                }
                break;
            case 5:
                with(Wren) {
                    if(vdist == 0) instance_destroy();
                }
                if(!instance_exists(Wren)) {
                    cutscene = false;
                    progress[0]++;
                }
                break;
        }
        break;
    case S_STRING:
        dialog_import("string");
        switch(progress[0]) {
            case 0:
                dialog_from_array(0, 5);
                progress[0]++;
                break;
            case 1: 
                if(inv_has("Vine") != -1) {
                    if(inv_read(inv_has("Vine"), ITEMQTY) == 5) {
                        progress[0]++;
                    }
                }
                break;
        }
        break;
    case S_WEIGHT:
        dialog_import("weight");
        switch(progress[0]) {
            case 2:
            case 3:
                if(room == rLeft_shed) {
                    progress[0] = 4;
                    alarm[0] = 1;
                }
                break;
            case 4:
                if(inv_has("Crowbar") != -1) {
                    progress[0]++;
                }
                break;
            case 5:
                if(inv_has("Rock") != -1) {
                    state[0] = S_GREASE;
                    progress[0] = 0;
                }
                break;
        }
        break;
    case S_FIX:
        dialog_import("fix");
        switch(progress[0]) {
            case 1:
                dialog_from_array(0, 8);
                progress[0] = 2;
                break;
            case 2: 
                if(room == rRight_left) {
                    alarm[0] = 1;
                    progress[0] = 0;
                    state[0] = S_NOBLESLAND;
                }
                break;
        }
        break;
    case S_NOBLESLAND:
        dialog_import("noblesland");
        switch(progress[0]) {
            case 1:
                if(instance_exists(Ulrico)) {
                    if(Ulrico.hdist == 0) {
                        Ulrico.vdist = -32;
                        progress[0] = 2;
                    }
                }
                break;
            case 2:
                if(instance_exists(Ulrico)) {
                    if(Ulrico.vdist == 0) {
                        with(Ulrico) instance_destroy();
                        cutscene = false;
                        progress[0] = 3;
                    }
                }
                break;
            case 4:
                if(room == rRight_right) {
                    if(instance_exists(Player)) {
                        if(Player.x + Player.hdist == 576) {
                            cutscene = true;
                            if(Player.hdist == 0) {
                                dialog_from_array(0, 1);
                                progress[0] = 5;
                            }
                        }
                    }
                } else if(room == rDads) {
                    progress[0] = 6;
                }
                break;
            case 5:
                if(room == rRight_right) {
                    if(instance_exists(Player)) {
                        if(Player.x + Player.hdist == 672) {
                            cutscene = true;
                            if(Player.hdist == 0) {
                                Player.hdist = -32;
                                dialog_from_array(2);
                            }
                        } else {
                            cutscene = false;
                        }
                    }
                } else if(room == rDads) {
                    progress[0] = 6;
                }
                break;
            case 6:
                cutscene = true;
                if(Player.hdist == 0 &amp;&amp; Player.vdist == 0){
                    dialog_from_array(3, 16);
                    progress[0] = 7;
                }
                break;
        }
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
