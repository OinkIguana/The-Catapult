<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000003</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize dialog when created
dialog_init();
inikey = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Say the room start dialog after objects have been drawn
switch(room) {
    default: break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deal with questions
//Dealing with input is done in End Step after the instances have been activated,
//allowing other instances to be affected.
if(currentOption != -1 &amp;&amp; dialog_count() == 1) {
    //If you do not want to ask for confirmation uncomment the following:
    //diaPos = string_length(dialog_get());
    //Also, remove both the 'diaPos = 0;' lines from below and do the 
    //necessary changes to the dialog_draw() event
    //Change options with up/down. Loop if gone past the last one
    if(keyboard_check_pressed(vk_down)) {
        diaPos = 0; //Set diaPos to 0 to make the user confirm after changing option
        currentOption = (currentOption + 1) % optionCount;
    } else if(keyboard_check_pressed(vk_up)) {
        diaPos = 0; 
        currentOption = ((currentOption - 1) + optionCount) % optionCount;
    }
} else if(!dialog_count() &amp;&amp; currentOption != -1) {
    /* If you prefer, you can figure out what the question was in other ways too.
    This is, in my opinion, the simplest way. If you find an easier one please
    tell me.*/
    //Save the question 
    var question = questionAsked, answer = currentOption;
    //Clear values. Must be done before handling in case you want to ask another question
    questionAsked = "";
    currentOption = -1;
    switch(question) {
        default:    //Give a failure message to make debugging easier
            dialog_msg("Question not found", "ERROR", noone, noone);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deal with string input
if(is_string(inputValue) &amp;&amp; dialog_count() == 1) {
    //Change the input value
    //Uncomment the next line if you don't want a confirm
    //diaPos = 1;
    //Also remove the 'diaPos = 0;' line from below
    if(inputValue != keyboard_string) {
        inputValue = keyboard_string;
        diaPos = 0; //Reset diaPos if the string has changed to make the player confirm again
    }
} else if(is_string(inputValue) &amp;&amp; !dialog_count()) {
    /* This works essentially the same as with options.
    Feel free to change the method of determining the question here too. */
    //Save question and answer
    var question = questionAsked, answer = inputValue;
    //Clear input values
    questionAsked = "";
    inputValue = 0;
    keyboard_string = "";
    switch(question) {
        default:
            dialog_msg("Question not found", "ERROR", noone, noone);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Actions on regular messages
if(!dialog_count()) {
    //Similar to questions, but without answers.
    if(lastMessage != "") {
        var same = lastMessage;
        switch(lastMessage) {
            case "It might be a little worn down so be careful!":
                StoryController.progress[0] = 1;
                break;
            case "Someone should be able to get rid of it.":
                StoryController.progress[0] = 3;
                break;
            case "Wonderful."+WAIT+WAIT+" Prepare to be chopped,"+WAIT+" log!":
                StoryController.cutscene = true;
                StoryController.progress[0]++;
                with(Wren) {
                    if(place_meeting(x - 32, y, Player)) {
                        with(Player) {
                            hdist = -32;
                            mvspd = 8;
                        }
                    }
                    hdist = -32;
                }
                break;
            case "Maybe my friends can help me.":
                StoryController.progress[0] = 7;
                break;
            case "I have a bad feeling about this still,"+WAIT+" but fine.":
                inv_subtract(inv_has("Cookie"), 1);
                StoryController.state[0] = S_STRING;
                StoryController.progress[0] = 0;
                break;
            case "I'll go check there then.":
                inv_subtract(inv_has("Vine"), 5);
                inv_add("Rope", 1);
                StoryController.state[0] = S_WEIGHT;
                StoryController.progress[0] = 0;
                break;
            case "If we could pry it out somehow I think it would be useful.":
                StoryController.progress[0] = 1;
                break;
            case "Thank you, "+COL+"nMs. Wren"+COL+"d!":
                StoryController.progress[0] = 2;
                inv_add("Key", 1);
                break;
            case "The door is locked.":
                if(StoryController.state[0] == S_WEIGHT &amp;&amp; StoryController.progress[0] == 2) {
                    if(inv_has("Key")) {
                        with(StoryController) dialog_from_array(0, 1);
                        StoryController.progress[0] = 3;
                    }
                }
                break;
            case "Alright,"+WAIT+" go ahead.":
                with(Rock) {
                    instance_destroy();
                }
                with(StoryController) {
                    dialog_from_array(3, 6);
                }
                break;
            case "Alright, I'll get some "+COL+"iBacon"+COL+"d.":
                StoryController.progress[0] = 1;
                break;
            case "Thank you so much "+COL+"nMom"+COL+"d. I know "+COL+"nBacon"+COL+"d is very special to you.":
                inv_add("Bacon", 1);
                StoryController.progress[0] = 2;
                break;
            case "Use it before it hardens!":
                inv_add("Grease", 1);
                inv_subtract(inv_has("Bacon"), 1);
                StoryController.state[0] = S_FIX;
                StoryController.progress[0] = 0;
                break;
            case "And it's fixed!":
                inv_subtract(inv_has("Rope"), 1);
                inv_subtract(inv_has("Rock"), 1);
                inv_subtract(inv_has("Grease"), 1);
                Catapult.image_index = 1;
                StoryController.progress[0] = 1;
                StoryController.cutscene = true;
                break;
            case "Goodbye...":
                instance_create(0, 0, Thrower);
                break;
            case "I shouldn't even be talking to you."+WAIT+WAIT+" So long.":
                with(Ulrico) {
                    if(place_meeting(x + 32, y, Player)) {
                        Player.hdist = 32;
                    }
                    hdist = 32;
                }
                with(StoryController) {
                    cutscene = true;
                    progress[0] = 1;
                }
                break;
            case "Get out of my sight before I must destroy you.":
                if(StoryController.progress[0] == 3) {
                    with(Protector) {
                        hdist = 300;
                    }
                    StoryController.progress[0] = 4;
                }
                break;
            case "Sure thing,"+WAIT+" son."+WAIT+WAIT+" I'm just glad to see you again."+WAIT+WAIT+" We'll go home one day.":
                instance_create(0, 0, GameEnd);
                break;
            //Do nothing by default
            default: break;
        }
        if(lastMessage == same) {
            lastMessage = ""; //Clear last message
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update dialog variables
/*
Here all variables that are to be used in strings must be included.
Make sure that the value actually exists before setting it.
These variables can only use letters, numbers and underscores (_),
similar to regular variables.
*/
/*
dialog_var("KEYCOUNT", 4 - (inv_has("Key 1") != -1)
                         - (inv_has("Key 2") != -1)
                         - (inv_has("Key 3") != -1) 
                         - (inv_has("Key 4") != -1));
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to next message, or skip to the end
if((input_check_pressed(ACTION) &amp;&amp; (!is_string(inputValue) || dialog_count() &gt; 1) || keyboard_check_pressed(vk_enter)) &amp;&amp; dialog_count()) {
    dialog_next();
    //Reactivate instances if there are no more messages
    //Reactivating them here ensures there is no frame where they aren't drawn
    if(!dialog_count()) {
        unpause();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set alarm for drawing messages
//Do room start messages 1 frame in so that the objects draw once
//If you don't want the sprites to show up until the dialog is finished,
//put the dialog_msg()'s in here.
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw dialog
if(dialog_count()) {
    //Pause the game (if not already paused)
    if(!sprite_exists(Controller.sPause)) {
        pause();
    }
    //Darken the surroundings if you want to draw attention to the dialog
    /*/Remove these 4 lines if you don't
    draw_set_alpha(0.2);
    draw_set_color(c_black);
    draw_rectangle(0, 0, window_get_width(), window_get_height(), false);
    draw_set_alpha(1);
    /****************************************************/
    //Draw the sprites, box, and message on top of sPause
    dialog_draw();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
